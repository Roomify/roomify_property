<?php

/**
 * @file
 */

/**
 * Implements hook_menu().
 */
function roomify_property_menu() {
  $items = array();

  $items['admin/bat/config/property/wizard/%ctools_js'] = array(
    'page callback' => 'roomify_property_wizard',
    'page arguments' => array(5),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['admin/bat/config/type/wizard/%roomify_property/%ctools_js'] = array(
    'page callback' => 'roomify_type_wizard',
    'page arguments' => array(5, 6),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_entity_info().
 */
function roomify_property_entity_info() {
  $return['roomify_property'] = array(
    'label' => t('Roomify Property'),
    // The entity class and controller class extend the classes provided by the
    // Entity API.
    'entity class' => 'RoomifyProperty',
    'controller class' => 'RoomifyPropertyController',
    'base table' => 'roomify_properties',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'property_id',
      'bundle' => 'type',
      'label' => 'name',
    ),
    // Bundles are defined by the property bundles below.
    'bundles' => array(),
    // Bundle keys tell the FieldAPI how to extract information from the bundle
    // objects.
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'creation callback' => 'roomify_property_create',
    'access callback' => 'roomify_property_access',
    'access arguments' => array(
      'user key' => 'uid',
      'access tag' => 'roomify_property_access',
    ),
    'permission labels' => array(
      'singular' => t('property'),
      'plural' => t('properties'),
    ),
    'module' => 'roomify_property',
    // The information below is used by the RoomifyPropertyUIController (which extends
    // the EntityDefaultUIController).
    'admin ui' => array(
      'path' => 'admin/bat/config/property',
      'file' => 'roomify_property.admin.inc',
      'controller class' => 'RoomifyPropertyUIController',
      'menu wildcard' => '%roomify_property',
    ),
    'metadata controller class' => 'RoomifyPropertyMetadataController',
    'translation' => array(
      'entity_translation' => array(
        'base path' => 'admin/bat/config/property/manage/%roomify_property',
        'default settings' => array(
          'default_language' => LANGUAGE_NONE,
          'hide_language_selector' => FALSE,
        ),
      ),
    ),
  );

  $return['roomify_property_type'] = array(
    'label' => t('Roomify Property Type'),
    'entity class' => 'RoomifyPropertyType',
    'controller class' => 'RoomifyPropertyTypeController',
    'base table' => 'roomify_property_types',
    'fieldable' => TRUE,
    'bundle of' => 'roomify_property',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'type',
      'label' => 'label',
    ),
    'access callback' => 'roomify_property_type_access',
    'module' => 'roomify_property',
    // Enable the entity API's admin UI.
    'admin ui' => array(
      'path' => 'admin/bat/config/property-types',
      'file' => 'roomify_property_type.admin.inc',
      'controller class' => 'RoomifyPropertyTypeUIController',
    ),
  );

  return $return;
}

/**
 * Implements hook_entity_info_alter().
 *
 * We are adding the info about the property types via a hook to avoid a recursion
 * issue as loading the room types requires the entity info as well.
 */
function roomify_property_entity_info_alter(&$entity_info) {
  foreach (roomify_property_get_types() as $type => $info) {
    $entity_info['roomify_property']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'admin/bat/config/property-types/manage/%roomify_property_type',
        'real path' => 'admin/bat/config/property-types/manage/' . $type,
        'bundle argument' => 5,
        'access arguments' => array('bypass roomify_property entities access'),
      ),
    );
  }
}

/**
 * Implements hook_permission().
 */
function roomify_property_permission() {
  $permissions = array();

  // Permission for Roomify Property Types.
  $permissions += array(
    'administer roomify_property_type entities' => array(
      'title' => t('Administer property types'),
      'description' => t('Allows users to add property types and configure their fields.'),
      'restrict access' => TRUE,
    ),
  );

  $permissions += bat_entity_access_permissions('roomify_property');

  return $permissions;
}

/**
 * Implements hook_views_api().
 */
function roomify_property_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'roomify_property') . '/views',
  );
}

/**
 * Determines whether the given user has access to a property.
 *
 * @param string $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param RoomifyProperty $property
 *   Optionally a property to check access for. If nothing is
 *   given, access for all properties is determined.
 * @param object $account
 *   The user to check for. Leave it to NULL to check for the global user.
 *
 * @return boolean
 *   Whether access is allowed or not.
 */
function roomify_property_access($op, $property = NULL, $account = NULL) {
  return bat_entity_access($op, $property, $account, 'roomify_property');
}

/**
 * Access callback: Checks whether the user has permission to add a property.
 *
 * @return bool
 *   TRUE if the user has add permission, otherwise FALSE.
 */
function roomify_property_add_access() {
  if (user_access('administer roomify_property_type entities')) {
    return TRUE;
  }

  $bundles = roomify_property_get_types();
  foreach ($bundles as $bundle) {
    if (roomify_property_access('create', roomify_property_create(array('type' => $bundle->type, 'uid' => 0)))) {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * The class used for property entities
 */
class RoomifyProperty extends Entity {

  public function __construct($values = array()) {
    parent::__construct($values, 'roomify_property');
  }

  /**
   * {@inheritdoc}
   */
  protected function defaultLabel() {
    return $this->name;
  }

}

/**
 * The class used for property type entities
 */
class RoomifyPropertyType extends Entity {

  /**
   * The property type.
   *
   * @var string
   */
  public $type;

  /**
   * The property type label.
   *
   * @var string
   */
  public $label;

  public function __construct($values = array()) {
    parent::__construct($values, 'roomify_property_type');
  }

}

/**
 * The MetadataController for RoomifyProperty entities
 */
class RoomifyPropertyMetadataController extends EntityDefaultMetadataController {

  public function entityPropertyInfo() {
    $info = parent::entityPropertyInfo();

    $properties = array('property_id', 'type', 'language', 'name', 'created', 'changed', 'uid');

    foreach ($properties as $property) {
      if (isset($info['roomify_property']['properties'][$property])) {
        $info['roomify_property']['properties'][$property]['getter callback'] = 'entity_property_verbatim_get';
        $info['roomify_property']['properties'][$property]['setter callback'] = 'entity_property_verbatim_set';
      }
    }

    return $info;
  }

}

/**
 * The Controller for RoomifyProperty entities
 */
class RoomifyPropertyController extends EntityAPIController {

  public function __construct($entityType) {
    parent::__construct($entityType);
  }

  public function create(array $values = array()) {
    $values += array(
      'property_id' => '',
      'is_new' => TRUE,
      'data' => '',
      'name' => '',
      'created' => '',
    );

    $property = parent::create($values);

    return $property;
  }

  /**
   * Overriding the buildContent function to add entity specific fields.
   */
  public function buildContent($entity, $view_mode = 'full', $langcode = NULL, $content = array()) {
    $content = parent::buildContent($entity, $view_mode, $langcode, $content);

    return $content;
  }

}

/**
 * The Controller for RoomifyPropertyType entities
 */
class RoomifyPropertyTypeController extends EntityAPIControllerExportable {

  public function __construct($entityType) {
    parent::__construct($entityType);
  }

  public function create(array $values = array()) {
    $values += array(
      'id' => '',
      'is_new' => TRUE,
      'data' => '',
    );

    $property_type = parent::create($values);

    return $property_type;
  }

}

function roomify_property_type_access() {
  return TRUE;
}

/**
 * Create a property object.
 */
function roomify_property_create($values = array()) {
  return entity_get_controller('roomify_property')->create($values);
}

/**
 * Create a property type object.
 */
function roomify_property_type_create($values = array()) {
  return entity_get_controller('roomify_property_type')->create($values);
}

/**
 * Menu argument loader; Load a property type by string.
 *
 * @param $type
 *   The machine-readable name of a property type to load.
 * @param bool $reset
 *   A boolean indicating whether the internal cache should be reset.
 *
 * @return array|false
 *   A property type array or FALSE if $type does not exist.
 */
function roomify_property_type_load($type, $reset = FALSE) {
  return roomify_property_get_types($type, $reset);
}

/**
 * Gets an array of all property types, keyed by the type name.
 *
 * @param string $type_name
 *   If set, the type with the given name is returned.
 * @param bool $reset
 *   A boolean indicating that the internal cache should be reset.
 *
 * @return RoomifyPropertyType[]
 *   Depending whether $type isset, an array of property types or a single one.
 */
function roomify_property_get_types($type_name = NULL, $reset = FALSE) {
  // entity_load() will get the Entity controller for our property type
  // entity and call the load function of that object.
  $types = entity_load_multiple_by_name('roomify_property_type', isset($type_name) ? array($type_name) : FALSE);
  return isset($type_name) ? reset($types) : $types;
}

/**
 * Saves a property type to the db.
 *
 * @param RoomifyPropertyType $property_type
 *   The property type to save.
 */
function roomify_property_type_save(RoomifyPropertyType $property_type) {
  $property_type->save();
}

/**
 * Deletes a property type from the db.
 */
function roomify_property_type_delete(RoomifyPropertyType $bundle) {
  $bundle->delete();
}

/**
 * Fetches a property object.
 *
 * @param int $property_id
 *   Integer specifying the property id.
 * @param bool $reset
 *   A boolean indicating whether the internal cache should be reset.
 * @return RoomifyProperty|false
 *   A fully-loaded $property object or FALSE if it cannot be loaded.
 *
 * @see roomify_property_load_multiple()
 */
function roomify_property_load($property_id, $reset = FALSE) {
  $properties = roomify_property_load_multiple(array($property_id), array(), $reset);
  return reset($properties);
}

/**
 * Loads multiple properties based on certain conditions.
 *
 * @param array $property_ids
 *   An array of property IDs.
 * @param array $conditions
 *   An array of conditions to match against the {roomify_properties} table.
 * @param bool $reset
 *   A boolean indicating that the internal cache should be reset.
 *
 * @return array
 *   An array of property objects, indexed by property_id.
 *
 * @see entity_load()
 * @see roomify_property_load()
 */
function roomify_property_load_multiple($property_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('roomify_property', $property_ids, $conditions, $reset);
}

/**
 * Deletes a property.
 *
 * @param RoomifyProperty $property
 *   The RoomifyProperty object that represents the property to delete.
 */
function roomify_property_delete(RoomifyProperty $property) {
  $property->delete();
}

/**
 * Deletes multiple properties.
 *
 * @param array $property_ids
 *   An array of property IDs.
 */
function roomify_property_delete_multiple(array $property_ids) {
  entity_get_controller('roomify_property')->delete($property_ids);
}

/**
 * Implements hook_theme().
 */
function roomify_property_theme() {
  return array(
    'roomify_property_add_list' => array(
      'variables' => array('content' => array()),
      'file' => 'roomify_property.admin.inc',
    ),
  );
}

/**
 * Add "Type" reference field.
 */
function roomify_property_add_bat_type_reference_field($type_bundle) {
  field_info_cache_clear();

  // "property_bat_type_reference" field.
  if (field_read_field('property_bat_type_reference') === FALSE) {
    $field = array(
      'field_name' => 'property_bat_type_reference',
      'type' => 'entityreference',
      'cardinality' => -1,
      'locked' => 1,
      'settings' => array(
        'target_type' => 'bat_type',
      ),
    );
    field_create_field($field);
  }

  field_cache_clear();

  // "property_bat_type_reference" field instance.
  if (field_read_instance('roomify_property', 'property_bat_type_reference', $type_bundle) === FALSE) {
    $instance = array(
      'field_name' => 'property_bat_type_reference',
      'entity_type' => 'roomify_property',
      'label' => 'Type',
      'bundle' => $type_bundle,
      'required' => FALSE,
      'widget' => array(
        'type' => 'entityreference_autocomplete',
      ),
    );

    // Check for IEF integration and use IEF widget if present.
    $entity_info = entity_get_info('bat_type');
    if (isset($entity_info['inline entity form'])) {
      $instance['widget']['type'] = 'inline_entity_form';
    }

    // Create field instance.
    field_create_instance($instance);
  }
}

/**
 * Implements hook_entity_insert().
 */
function roomify_property_entity_insert($entity, $type) {
  global $user;

  if ($type == 'roomify_property_type') {
    roomify_property_add_bat_type_reference_field($entity->type);
  }
  if ($type == 'roomify_property') {
    $types_reference = field_get_items($type, $entity, 'property_bat_type_reference');
    foreach ($types_reference as $reference) {
      $type_referenced = bat_type_load($reference['target_id']);
      $bat_units = bat_unit_load_multiple(FALSE, array('type_id' => $type_referenced->type_id));
      if (empty($bat_units)) {
        $unit = bat_unit_create(array('type' => 'default'));
        $unit->name = $type_referenced->name . ' 1';
        $unit->created = !empty($unit->date) ? strtotime($unit->date) : REQUEST_TIME;

        $unit->type_id = $type_referenced->type_id;
        $unit->default_state = 1;
        $unit->uid = $user->uid;
        $unit->save();
      }
    }
  }
}

/**
 * Gets a list of Roomify Properties keyed by id and name in value.
 */
function roomify_property_ids($bundle = '') {
  $properties = array();

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'roomify_property');

  if ($bundle != '') {
    $query->entityCondition('bundle', $bundle);
  }

  $result = $query->execute();

  if (count($result) > 0) {
    $entities = entity_load('roomify_property', array_keys($result['roomify_property']));
    foreach ($entities as $type) {
      $wrapper = entity_metadata_wrapper('roomify_property', $type);
      $properties[$wrapper->property_id->value()] = $wrapper->name->value();
    }
  }

  return $properties;
}

/**
 * Implements hook_views_pre_render().
 */
function roomify_property_views_pre_render(&$view) {
  // Hide "Add Types" button if this is a Casa.
  if ($view->name == 'property_types') {
    if (count($view->result) == 1 && $view->result[0]->bat_types_type == 'home') {
      unset($view->header['area']);
    }
  }
}

/**
 * Callback for Add property wizard
 */
function roomify_property_wizard($ajax) {
  if ($ajax) {
    ctools_include('ajax');
    ctools_include('modal');

    $form_state = array(
      'ajax' => TRUE,
      'title' => t('Add New Property'),
    );

    // Use ctools to generate ajax instructions for the browser to create
    // a form in a modal popup.
    $output = ctools_modal_form_wrapper('roomify_property_wizard_form', $form_state);

    // If the form has been submitted, there may be additional instructions
    // such as dismissing the modal popup.
    if (!empty($form_state['ajax_commands'])) {
      $output = $form_state['ajax_commands'];
    }

    // Return the ajax instructions to the browser via ajax_render().
    print ajax_render($output);
    drupal_exit();
  }
  else {
    return drupal_get_form('roomify_property_wizard_form');
  }
}

/**
 * Roomify Add Property Wizard form main callback.
 */
function roomify_property_wizard_form($form, &$form_state) {
  // Initialize a description of the steps for the wizard.
  if (empty($form_state['step'])) {
    $form_state['step'] = 1;

    // This array contains the function to be called at each step to get the
    // relevant form elements. It will also store state information for each
    // step.
    $form_state['step_information'] = _roomify_property_wizard_steps();
  }
  $step = &$form_state['step'];
  drupal_set_title(t('Add Property: Step @step', array('@step' => $step)));

  // Call the function named in $form_state['step_information'] to get the
  // form elements to display for this step.
  $form = $form_state['step_information'][$step]['form']($form, $form_state);

  // Show the 'previous' button if appropriate. Note that #submit is set to
  // a special submit handler, and that we use #limit_validation_errors to
  // skip all complaints about validation when using the back button. The
  // values entered will be discarded, but they will not be validated, which
  // would be annoying in a "back" button.
  if ($step > 1) {
    $form['prev'] = array(
      '#type' => 'submit',
      '#value' => t('Previous'),
      '#name' => 'prev',
      '#submit' => array('roomify_property_wizard_form_previous_submit'),
      '#limit_validation_errors' => array(),
    );
  }

  // Show the Next button only if there are more steps defined.
  if ($step < count($form_state['step_information'])) {
    // The Next button should be included on every step.
    $form['next'] = array(
      '#type' => 'submit',
      '#value' => t('Next'),
      '#name' => 'next',
      '#submit' => array('roomify_property_wizard_form_next_submit'),
    );
  }
  else {
    // Just in case there are no more steps, we use the default submit handler
    // of the form wizard. Call this button Finish, Submit, or whatever you
    // want to show. When this button is clicked, the
    // form_example_wizard_submit handler will be called.
    $form['finish'] = array(
      '#type' => 'submit',
      '#value' => t('create property and add details'),
      '#suffix' => '<div class="clearfix"> </div>',
    );
  }

  // Include each validation function defined for the different steps.
  if (function_exists($form_state['step_information'][$step]['form'] . '_validate')) {
    $form['next']['#validate'] = array($form_state['step_information'][$step]['form'] . '_validate');
  }

  return $form;
}

/**
 * Submit handler for the "previous" button.
 */
function roomify_property_wizard_form_previous_submit($form, &$form_state) {
  $current_step = &$form_state['step'];
  $form_state['step_information'][$current_step]['stored_values'] = $form_state['values'];
  if ($current_step > 1) {
    $current_step--;
    $form_state['values'] = $form_state['step_information'][$current_step]['stored_values'];
  }
  $form_state['rebuild'] = TRUE;
}

/**
 * Submit handler for the 'next' button.
 */
function roomify_property_wizard_form_next_submit($form, &$form_state) {
  $current_step = &$form_state['step'];
  $form_state['step_information'][$current_step]['stored_values'] = $form_state['values'];

  if ($current_step < count($form_state['step_information'])) {
    $current_step++;
    if (!empty($form_state['step_information'][$current_step]['stored_values'])) {
      $form_state['values'] = $form_state['step_information'][$current_step]['stored_values'];
    }
    else {
      $form_state['values'] = array();
    }
    // Force rebuild with next step.
    $form_state['rebuild'] = TRUE;
    return;
  }
}

/**
 * Returns form elements for the 'property name' page of the wizard.
 */
function roomify_property_wizard_form_property_name($form, &$form_state) {
  $form = array();
  $form['close_button'] = _roomify_property_wizard_close_button();

  $form['#attached']['js'] = array(
    drupal_get_path('module', 'roomify_dashboard') . '/js/roomify_dashboard_modal.js',
    drupal_get_path('module', 'roomify_property') . '/js/property_wizard.js',
  );
  $form['#attached']['css'] = array(
    drupal_get_path('module', 'roomify_property') . '/css/property_wizard.css',
    drupal_get_path('module', 'roomify_property') . '/css/property_name.css',
  );

  $form['property_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Property Name'),
    '#default_value' => !empty($form_state['values']['property_name']) ? $form_state['values']['property_name'] : '',
    '#required' => TRUE,
  );

  // Get available types.
  $types = roomify_property_get_types();
  $options = array();
  foreach ($types as $type) {
    if ($type->type == 'casa_property') {
      $options[$type->type] = t('Single-Unit (entire home)');
    }
    elseif ($type->type == 'locanda_property') {
      $options[$type->type] = t('Multi-Unit (multiple rooms / types within a property)');
    }
    else {
      $options[$type->type] = $type->label;
    }
  }

  $form['property_type'] = array(
    '#type' => 'radios',
    '#options' => $options,
    '#required' => TRUE,
  );

  // Hide property type radios if there's only one choice.
  if (count($options) == 1) {
    $form['property_type']['#access'] = FALSE;
    $form['property_type']['#default_value'] = current(array_keys($options));
  }

  return $form;
}

/**
 * Returns form elements for the 'type info' page of the wizard.
 */
function roomify_property_wizard_form_type_info($form, &$form_state) {
  $form = array();
  $form['close_button'] = _roomify_property_wizard_close_button();
  $form['#attached']['js'] = array(
    drupal_get_path('module', 'roomify_property') . '/js/property_wizard.js',
  );
  $form['#attached']['css'] = array(
    drupal_get_path('module', 'roomify_property') . '/css/property_wizard.css',
  );

  $form['property_title'] = array(
    '#markup' => '<h2>' . $form_state['step_information'][1]['stored_values']['property_name'] . '</h2>'
  );

  // Change the form elements we provide based on the property type.
  switch ($form_state['step_information'][1]['stored_values']['property_type']) {
    case 'casa_property':
      $form['#attached']['css'][] = drupal_get_path('module', 'roomify_property') . '/css/property_type_casa.css';
      $form['container'] = array(
        '#type' => 'container',
        '#attributes' => array(
          'class' => array('container-inline'),
        ),
      );
      $form['container']['max_occupants'] = array(
        '#type' => 'textfield',
        '#title' => t('Max Occupants'),
        '#size' => 2,
        '#required' => TRUE,
        '#default_value' => !empty($form_state['values']['max_occupants']) ? $form_state['values']['max_occupants'] : '',
        '#element_validate' => array('element_validate_integer_positive'),
      );
      $form['container']['default_price'] = array(
        '#type' => 'textfield',
        '#title' => t('Default Price Per Night'),
        '#size' => 4,
        '#required' => TRUE,
        '#default_value' => !empty($form_state['values']['default_price']) ? $form_state['values']['default_price'] : '',
        '#element_validate' => array('element_validate_number'),
      );
      break;
    case 'locanda_property':
      $form['#attached']['css'][] = drupal_get_path('module', 'roomify_property') . '/css/property_type_locanda.css';
      // Because we have many fields with the same values, we have to set
      // #tree to be able to access them.
      $form['#tree'] = TRUE;
      $form['types_container'] = array(
        '#type' => 'container',
        '#title' => t('Define Room Types'),
        '#prefix' => '<div id="types-container-wrapper">',
        '#suffix' => '</div>',
      );

      // Build the fieldset with the proper number of types. We'll use
      // $form_state['num_types'] to determine the number of fields to build.
      if (empty($form_state['num_types'])) {
        $form_state['num_types'] = 1;
      }
      for ($i = 0; $i < $form_state['num_types']; $i++) {
        $form['types_container'][$i] = array(
          '#type' => 'container',
          '#attributes' => array(
            'class' => array('container-inline'),
          ),
          '#prefix' => '<div class="type-container" id="type-container-' . $i . '">',
          '#suffix' => '</div>',
        );

        $form['types_container'][$i]['name'] = array(
          '#type' => 'textfield',
          '#size' => '20',
          '#title' => t('Type Name'),
        );
        $form['types_container'][$i]['rooms'] = array(
          '#type' => 'textfield',
          '#title' => t('Number of Rooms'),
          '#size' => 2,
          '#element_validate' => array('element_validate_integer_positive'),
        );
        $form['types_container'][$i]['default_price'] = array(
          '#type' => 'textfield',
          '#title' => t('Default Price Per Night'),
          '#size' => 4,
          '#element_validate' => array('element_validate_number'),
        );
        $form['types_container'][$i]['max_occupancy'] = array(
          '#type' => 'textfield',
          '#title' => t('Max Occupancy'),
          '#size' => 2,
          '#element_validate' => array('element_validate_integer_positive'),
        );
      }
      $form['types_container']['add_type'] = array(
        '#type' => 'submit',
        '#value' => t('add another type'),
        '#submit' => array('roomify_property_wizard_form_add_one'),
      );
      if ($form_state['num_types'] > 1) {
        $form['types_container']['remove_name'] = array(
          '#type' => 'submit',
          '#value' => t('remove a type'),
          '#submit' => array('roomify_property_wizard_form_remove_one'),
        );
      }

      break;
  }

  return $form;
}

/**
 * Validation handler for type info form step
 */
function roomify_property_wizard_form_validate($form, &$form_state) {
  // Ensure that all values are set for each type.
  $type_fields = array('name', 'rooms', 'default_price', 'max_occupancy');
  $types = $form_state['input']['types_container'];
  for ($i = 0; $i < count($types['name']); $i++) {
    $check_fields = FALSE;
    foreach ($type_fields as $field) {
      if (strlen($types[$field][$i])) {
        $check_fields = TRUE;
      }
    }

    // At least one field was filled in for this type, ensure all fields were filled in.
    if ($check_fields) {
      foreach ($type_fields as $field) {
        if (!strlen($types[$field][$i])) {
          form_set_error('types_container][' . $field . '][' . $i, t('Please enter a value for all fields'));
        }
      }
    }
  }
}

/**
 * Add another type form line.
 */
function roomify_property_wizard_form_add_one($form, &$form_state) {
  $current_step = 2;
  $form_state['step_information'][$current_step]['stored_values'] = $form_state['values'];

  if (!empty($form_state['step_information'][$current_step]['stored_values'])) {
    $form_state['values'] = $form_state['step_information'][$current_step]['stored_values'];
  }
  else {
    $form_state['values'] = array();
  }

  $form_state['num_types']++;
  // Force rebuild with next step.
  $form_state['rebuild'] = TRUE;
}

/**
 * Remove a type form line.
 */
function roomify_property_wizard_form_remove_one($form, &$form_state) {
  $current_step = 2;
  $form_state['step_information'][$current_step]['stored_values'] = $form_state['values'];

  if (!empty($form_state['step_information'][$current_step]['stored_values'])) {
    $form_state['values'] = $form_state['step_information'][$current_step]['stored_values'];
  }
  else {
    $form_state['values'] = array();
  }

  $form_state['num_types']--;
  // Force rebuild with next step.
  $form_state['rebuild'] = TRUE;
}

/**
 * Roomify add a Property wizard form submit handler.
 */
function roomify_property_wizard_form_submit($form, &$form_state) {
  global $user;

  $current_step = &$form_state['step'];
  $form_state['step_information'][$current_step]['stored_values'] = $form_state['values'];

  // In this case we've completed the final page of the wizard, so process the
  // submitted information.
  $property_name = $form_state['step_information'][1]['stored_values']['property_name'];
  $property_type = $form_state['step_information'][1]['stored_values']['property_type'];
  if ($property_id = $form_state['step_information'][1]['stored_values']['property_id']) {
    $property = roomify_property_load($property_id);
  }
  else {
    $property = new RoomifyProperty();
    $property->name = $property_name;
    $property->type = $property_type;
    $property->uid = $user->uid;
  }

  switch ($property_type) {
    case 'casa_property':
      $type = new BatType();
      $type->name = 'Home';
      $type->type = 'home';
      $type->uid = $user->uid;
      $type->created = time();
      $type->field_st_max_capacity[LANGUAGE_NONE][0]['value'] = $form_state['step_information'][2]['stored_values']['max_occupants'];
      $type->field_st_default_price[LANGUAGE_NONE][0]['amount'] = $form_state['step_information'][2]['stored_values']['default_price'] * 100;
      $type->field_st_default_price[LANGUAGE_NONE][0]['currency_code'] = commerce_default_currency();
      $type->save();

      $property->property_bat_type_reference[LANGUAGE_NONE][0]['target_id'] = $type->type_id;
      $property->save();

      break;
    case 'locanda_property':
      $type_values = $form_state['step_information'][2]['stored_values']['types_container'];
      // Remove form values that aren't type info.
      foreach ($type_values as $index => $type_value) {
        if (!is_array($type_value)) {
          unset($type_values[$index]);
        }
      }
      $type_ids = array();
      for ($i = 0; $i < count($type_values); $i++) {
        // Create type.
        $type = new BatType();
        $type->name = $type_values[$i]['name'];
        $type->type = 'room';
        $type->uid = $user->uid;
        $type->created = time();
        $type->field_st_max_capacity[LANGUAGE_NONE][0]['value'] = $type_values[$i]['max_occupancy'];
        $type->field_st_default_price[LANGUAGE_NONE][0]['amount'] = $type_values[$i]['default_price'] * 100;
        $type->field_st_default_price[LANGUAGE_NONE][0]['currency_code'] = commerce_default_currency();
        $type->save();
        $type_ids[] = $type->type_id;

        // Create units for this type.
        for ($j = 0; $j < $type_values[$i]['rooms']; $j++) {
          $unit = bat_unit_create(array('type' => 'default'));
          $unit->name = $type->name . ' ' . ($j + 1);
          $unit->created = !empty($unit->date) ? strtotime($unit->date) : REQUEST_TIME;
          $unit->type_id = $type->type_id;
          $unit->default_state = 1;
          $unit->uid = $user->uid;
          $unit->save();
        }
      }

      foreach ($type_ids as $type_id) {
        $property->property_bat_type_reference[LANGUAGE_NONE][]['target_id'] = $type_id;
      }
      $property->save();

      break;
  }

  // Close the modal.
  ctools_add_js('ajax-responder');
  $form_state['ajax_commands'][] = ctools_modal_command_dismiss();

  // Redirect user to property page.
  $delay = 0;
  $options = array('query' => array('destination' => 'user'));
  if (!empty($form_state['#redirect'])) {
    $path = $form_state['#redirect'];
  }
  else {
    $path = 'admin/bat/config/property/manage/' . $property->property_id;
  }
  $form_state['ajax_commands'][] = ctools_ajax_command_redirect($path, $delay, $options);
}

/**
 * Returns the list of steps and their associated forms.
 *
 * @return array
 *   List of steps and their forms.
 */
function _roomify_property_wizard_steps() {
  return array(
    1 => array(
      'form' => 'roomify_property_wizard_form_property_name',
    ),
    2 => array(
      'form' => 'roomify_property_wizard_form_type_info',
    ),
  );
}

/**
 * Return form element for close button.
 */
function _roomify_property_wizard_close_button() {
  $close_text = t('Close Window');
  $image_uri = url(drupal_get_path('module', 'roomify_property') . '/images/close.png');

  return array(
    '#markup' => '<a class="close ctools-close-modal" href="#">' .
                 '<img height="25px" src="' . $image_uri . '" alt="' . $close_text . '" title="' . $close_text . '" />' .
                 '</a>',
   );
}

/**
 * Callback for Add type wizard.
 */
function roomify_type_wizard($property, $ajax) {
  if ($ajax) {
    ctools_include('ajax');
    ctools_include('modal');

    $form_state = array(
      'ajax' => TRUE,
      'title' => t('Add New Type'),
    );

    $step = 2;
    $form_state['step'] = $step;
    $form_state['step_information'][1]['stored_values']['property_type'] = 'locanda_property';
    $form_state['step_information'][1]['stored_values']['property_id'] = $property->property_id;
    $form_state['step_information'][1]['stored_values']['property_name'] = $property->name;
    $form_state['#redirect'] = 'admin/bat/config/property/manage/' . $property->property_id . '/types';

    // Use ctools to generate ajax instructions for the browser to create
    // a form in a modal popup.
    $output = ctools_modal_form_wrapper('roomify_type_wizard_form', $form_state, $property->property_id);

    // If the form has been submitted, there may be additional instructions
    // such as dismissing the modal popup.
    if (!empty($form_state['ajax_commands'])) {
      $output = $form_state['ajax_commands'];
    }

    // Return the ajax instructions to the browser via ajax_render().
    print ajax_render($output);
    drupal_exit();
  }
  else {
    return drupal_get_form('roomify_type_wizard_form', $property->property_id);
  }
}

/**
 * Roomify Add Type Wizard form main callback.
 */
function roomify_type_wizard_form($form, &$form_state, $property_id) {
  drupal_set_title(t('Add Types'));

  // Call the function named in $form_state['step_information'] to get the
  // form elements to display for this step.
  $form = roomify_property_wizard_form_type_info($form, $form_state);

  $form['#submit'] = array('roomify_property_wizard_form_submit');
  $form['finish'] = array(
    '#type' => 'submit',
    '#value' => t('Add types'),
    '#suffix' => '<div class="clearfix"> </div>',
  );

  return $form;
}

/**
 * Implements hook_entity_presave().
 */
function roomify_property_entity_presave($entity, $type) {
  if ($type == 'roomify_property') {
    $types_reference = field_get_items($type, $entity, 'property_bat_type_reference');

    foreach ($types_reference as $reference) {
      $type_referenced = bat_type_load($reference['target_id']);

      // Sync Type author with Property author.
      if ($type_referenced->uid != $entity->uid) {
        $type_referenced->uid = $entity->uid;
        $type_referenced->save();
      }
    }
  }
}
